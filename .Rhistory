qplot(yearID,value,data=m,color=variable)
m <- melt(sy,id="yearID",measure= c("Average","Median","Maximum", "Minimum"))
mp <- m[m$yearID < 2010,]
m <- melt(sy,id="yearID",measure= c("Average","Median","Maximum", "Minimum"))
library(Lahman)
library(plyr)
library(ggplot2)
suppressMessages(library(reshape))
options(scipen = 5)
qplot(yearID,value,data=m,color=variable)
m <- melt(sy,id="yearID",measure= c("Average","Median","Maximum", "Minimum"))
mp <- m[m$yearID <= 2010,]
ggplot(mp, aes(x=variable, y=value)) + geom_bar(fill="#FF9999", colour="black")
ts
ggplot(ts,aes(x=yearID,y=salary),color=yearID)
ggplot(ts,aes(x=yearID,y=salary),color=yearID) + geom_point()
ggplot(ts,aes(x=yearID,y=salary),color=yearID) + geom_point()
ggplot(ts,aes(x=salary,y=w),color=yearID) + geom_point()
ts
head(ts)
ggplot(ts,aes(x=salary,y=W),color=yearID) + geom_point()
ggplot(ts,aes(x=salary,y=W),color=factor(yearID)) + geom_point()
ggplot(ts,aes(x=salary,y=W),color=factor(lgID)) + geom_point()
ggplot(ts,aes(x=salary,y=W)) + geom_point(color=lgID)
ggplot(ts,aes(x=salary,y=W)) + geom_point(color=lgID,data = ts)
head(ts)
ggplot(ts,aes(x=salary,y=W)) + geom_point(color=lgID,data = ts)
ggplot(ts,aes(x=salary,y=W)) + geom_point(data=ts,color=lgID)
str(ts)
ggplot(ts,aes(x=salary,y=W)) + geom_point(data=ts,mapping(color=lgID))
ggplot(ts,aes(x=salary,y=W)) + geom_point(data=ts,mapping=aes(color=lgID))
ggplot(ts,aes(x=salary,y=W)) + geom_point(data=ts,mapping=aes(color=yearID))
ggplot(ts,aes(x=salary,y=W)) + geom_point(data=ts,mapping=aes(color=factor(yearID))
ggplot(ts,aes(x=salary,y=W)) + geom_point(data=ts,mapping=aes(color=factor(yearID)))
ggplot(ts,aes(x=salary,y=W)) + geom_point(data=ts,mapping=aes(color=factor(yearID)))
ggplot(ts,aes(x=salary,y=W)) + geom_point(data=ts,mapping=aes(color=(Year))
)
ts$Year <- factor(ts$yearID)
ggplot(ts,aes(x=salary,y=W)) + geom_point(data=ts,mapping=aes(color=(Year)))
ggplot(ts,aes(x=salary,y=W)) + geom_point(data=ts,mapping=aes(color=Year))
ts$Wins <- ts$W
ts$Wins <- ts$W
ggplot(ts,aes(x=salary,y=Wins)) + geom_point(data=ts,mapping=aes(color=Year))
str(ts)
ggplot(ts,aes(x=salary,y=Wins)) + geom_point(data=ts,mapping=aes(color=Year))
+ geom_smoth(method="lm")
ggplot(ts,aes(x=salary,y=Wins)) + geom_point(data=ts,mapping=aes(color=Year))
+ geom_smooth(method="lm")
ggplot(ts,aes(x=salary,y=Wins)) + geom_point(data=ts,mapping=aes(color=Year))
+ geom_smooth(method=lm)
ggplot(ts,aes(x=salary,y=Wins)) + geom_point(data=ts,mapping=aes(color=Year))
+ geom_smooth(method=lm)
ggplot(ts,aes(x=salary,y=Wins)) + geom_point(data=ts,mapping=aes(color=Year))
ggplot(ts,aes(x=salary,y=Wins)) + geom_point(data=ts,mapping=aes(color=Year))
+ geom_smooth()
install.packages("fueleconomy")
library(Lahman)
install.packages("shiny")
install.packages("devtools")
install.packages("Lahman")
install.packages("plyr")
install.packages("ggplot2")
install.packages("reshape")
devtools::install_github('rstudio/shinyapps')
devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
?fueleconomy
head(vehicles)
f <- fueleconomy
v <- vehicles
v[order(v$hwy),]
v[v$hwy > 40,]
str(v)
common
head(common)
?common
head(vehicles)
v[v$make == 'Honda',]
str(v)
v[v$hwy > 42,c(2,3,4,11,12)]
str(v)
v[v$hwy > 42 | v$year < 1990,c(2,3,4,11,12)]
v[v$hwy > 42 & v$year < 1990,c(2,3,4,11,12)]
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
plot(x,y)
?hat
hat(x)
f5 <- lm(y ~ x)
plot(x,y)
abline(f5)
hat(x)
hatvalues(f5)
f1 <- lm(mpg ~ factor(cyl) + wt,data = mtcars)
summary(f1)
# Regression Models Peer Assessment
data(mtcars)
# mtcars$am  Transmission (0 = automatic, 1 = manual)
automatic <- mtcars[mtcars$am == 0,]
manual <- mtcars[mtcars$am == 1,]
# exploratory charts
# cars with manual transmission get better gas mileage, but also weigh less
boxplot(mtcars[mtcars$am == 0,]$mpg,mtcars[mtcars$am == 1,]$mpg
,ylab="MPG",xlab="Transmission"
,main="Miles Per Gallon (MPG) by Transmission Type",col=c("red","blue"))
#boxplot(mtcars[mtcars$am == 0,]$wt,mtcars[mtcars$am == 1,]$wt
#        ,xlab="Transmission",ylab="MPG")
#axis(2,labels=c("Auto","Manual"))
coplot(mpg ~ wt | as.factor(am), data = mtcars,
panel = panel.smooth, rows = 1)
fit <- lm(mpg ~ wt,data = mtcars)
fit.tran<- lm(mpg ~ am,data = mtcars)
with(mtcars,plot(wt,mpg,col=factor(am),pch=19,main="Miles Per Gallon by Weight",
xlab="Weight (Tons)",ylab="Miles Per Gallon (MPG)"))
# end exploratory charts
# plot residuals of r model with weight as predictor and mpg as outcome
plot(resid(fit))
fit.all <- (mpg ~ .,data = mtcars)
fit.all <- lm(mpg ~ .,data = mtcars)
summary(fit.all)
summary(fit)
fit.wt <- lm(mpg ~ wt,data = mtcars)
summary(fit.wt)
mtcars
str(mtcars)
?mtcars
lm(y~factor(x) + z)
f1 <- lm(mpg ~ factor(cyl) + wt,data = mtcars)
summary(f1)
f2 <- lm(mpg ~ factor(cyl),data = mcars)
f2 <- lm(mpg ~ factor(cyl),data = mtcars)
summary(fx)
summary(f2)
f3n <- lm(mpg ~ factor(cyl) + wt,data = mtcars)
f3i <- lm(mpg ~ factor(cyl) + wt + factor(cyl)*wt,data = mtcars)
anova(f3n,f3i)
anova(f3i,f3n)
install.packages("lmtest")
library(lmtest)
?lrtest
lrtest(f3n)
anova(f3i,f3n)
f4 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(f4)
summary(f1)
summary(f4)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
f5 <- lm(y ~ x)
plot(x,y)
abline(f5)
hat(x)
hatvalues(f5)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
hat(x)
?influence.measures
?hat
f6 <- lm(y ~ x)
dfbetas(f6)
dfbeta(f6)
hatvalues(f6)[1:5]
dfbeta(f6)[5,2]
dfbetas(f6)[5,2]
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
f5 <- lm(y ~ x)
plot(x,y)
abline(f5)
hat(x)
hatvalues(f5)
?mtcars
f4 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
f4a <- lm(mpg ~ wt + factor(cyl), data = mtcars)
summary(f4)
summary(f4a)
f4b <- lm(mpg ~ I(wt * 0.5)  data = mtcars)
summary(f4b)
f4b <- lm(mpg ~ I(wt * 0.5),  data = mtcars)
summary(f4b)
f4 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(f4)
f4 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
f4a <- lm(mpg ~ wt + factor(cyl), data = mtcars)
summary(f4)
summary(f4a)
summary(f4)
install.packages("swirl")
f1 <- lm(mpg ~ factor(cyl) + wt,data = mtcars)
summary(f1)
swirl()
library(swirl)
swirl()
install.packages("UsingR")
library(UsingR)
swirl()
ones <- rep(1, nrow(galton))
lm(chile ~ ones + parent -1,galton)
lm(child ~ ones + parent -1,galton)
lm(child ~ parent, galton)
lm(child ~ 1,galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth",trees)
head(trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1,trees2)
lapply(list(fit,fit2),coef)
data(mtcars)
# mtcars$am  Transmission (0 = automatic, 1 = manual)
#automatic <- mtcars[mtcars$am == 0,]
#manual <- mtcars[mtcars$am == 1,]
# exploratory charts
# cars with manual transmission get better gas mileage, but also weigh less
boxplot(mtcars[mtcars$am == 0,]$mpg,mtcars[mtcars$am == 1,]$mpg
,ylab="MPG",xlab="Transmission"
,main="Miles Per Gallon (MPG) by Transmission Type",col=c("red","blue"))
#boxplot(mtcars[mtcars$am == 0,]$wt,mtcars[mtcars$am == 1,]$wt
cor(mtcars)
?boxplot
example(boxplot)
boxplot(mpg ~ am, data = mtcars)
example(boxplot)
boxplot(mpg ~ am, data = mtcars,col = c("red","blue")
,ylab="MPG",xlab="Transmission"
,main="Miles Per Gallon (MPG) by Transmission Type",col=c("red","blue"))
boxplot(mpg ~ am, data = mtcars,col = col = "blue"
boxplot(mpg ~ am, data = mtcars,col = "blue"
,ylab="MPG",xlab="Transmission"
,main="Miles Per Gallon (MPG) by Transmission Type",col=c("red","blue"))
boxplot(mpg ~ am, data = mtcars
,ylab="MPG",xlab="Transmission"
,main="Miles Per Gallon (MPG) by Transmission Type",col=c("red","blue"))
#boxplot(mtcars[mtcars$am == 0,]$wt,mtcars[mtcars$am == 1,]$wt
cor(mtcars)
cor(mtcars)[,1]
cor(mtcars)[-1,1]
fit.wt <- lm(mpg ~ wt,data = mtcars)
fit.all <- lm(mpg ~ .,data = mtcars)
summary(fit.all)
step.lm <- step(fit.all)
step.lm$anova
fit.best <- lm(mpg ~ wt + qsec + am, data = mtcars)
anova(fit.best)
par(mfrow = c(2,2))
plot(fit.best)
par(mfrow = c(1,1))
plot(resid(fit.best))
abline(h=0)
abline(h=0,col="red",lwd=2)
summary(fit.best)
fit.best <- lm(mpg ~ wt + qsec + factor(am), data = mtcars)
anova(fit.best)
par(mfrow = c(2,2))
plot(fit.best)
par(mfrow = c(1,1))
plot(resid(fit.best))
abline(h=0,col="red",lwd=2)
summary(fit.best)
?step
data(mtcars)
# mtcars$am  Transmission (0 = automatic, 1 = manual)
#automatic <- mtcars[mtcars$am == 0,]
#manual <- mtcars[mtcars$am == 1,]
# exploratory charts
# cars with manual transmission get better gas mileage, but also weigh less
boxplot(mpg ~ am, data = mtcars
,ylab="MPG",xlab="Transmission"
,main="Miles Per Gallon (MPG) by Transmission Type",col=c("red","blue"))
#boxplot(mtcars[mtcars$am == 0,]$wt,mtcars[mtcars$am == 1,]$wt
#        ,xlab="Transmission",ylab="MPG")
#axis(2,labels=c("Auto","Manual"))
coplot(mpg ~ wt | as.factor(am), data = mtcars,
panel = panel.smooth, rows = 1)
fit.tran<- lm(mpg ~ am,data = mtcars)
with(mtcars,plot(wt,mpg,col=factor(am),pch=19,main="Miles Per Gallon by Weight",
xlab="Weight (Tons)",ylab="Miles Per Gallon (MPG)"))
legend(4,28,c("Manual","Automatic"))
# end exploratory charts
# plot residuals of r model with weight as predictor and mpg as outcome
plot(resid(fit))
fit.wt <- lm(mpg ~ wt,data = mtcars)
fit.all <- lm(mpg ~ .,data = mtcars)
summary(fit.all)
step.lm <- step(fit.all)
step.lm$anova
fit.best <- lm(mpg ~ wt + qsec + factor(am), data = mtcars)
anova(fit.best)
par(mfrow = c(2,2))
plot(fit.best)
par(mfrow = c(1,1))
plot(resid(fit.best))
abline(h=0,col="red",lwd=2)
summary(fit.best)
extractAIC(fit.best)
?step
?pt
?poisson
?pnorm
?ppois
poisson.text(3,2)
poisson.test(3,2)
?ppois
example(ppois)
ppois(3,2)
ppois(4,2)
ppois(1,2)
ppois(0,2)
?ave
ave(mtcars$mpg,mtcars$am)
library(Lahman)
library(plyr)
library(ggplot2)
suppressMessages(library(reshape))
options(scipen = 5)
data(Salaries)
s <- Salaries
t <- Teams
t <- t[,c("yearID","teamID","lgID","W","name","DivWin","WCWin","LgWin","WSWin")]
# summarize data
s <- ddply(s, .(yearID,teamID,lgID),summarise,  salary = sum(salary))
ts <- merge(s,t)
ts <- ts[ts$yearID > 2010,]
ts$salary <- ts$salary/1000000
tw <- ts[ts$DivWin == 'Y' | ts$WCWin == 'Y',]
tc <- ts[ts$teamID == 'COL',]
fit <- lm(W ~ salary,data = ts)
fitw <- lm(W ~ salary,data = tw)
plot(ts$salary,ts$W,xlab="Team Salary",ylab="Yearly Wins",col="red")
points(tw$salary,tw$W,pch=19,col="blue")
points(tc$salary,tc$W,pch=19,col="mediumpurple4",cex=1.25)
text(tc$salary+10,tc$W,labels = "Rockies",offset=1)
abline(fit,col="red",lwd=2)
abline(fitw,col="blue",lwd=2)
library("MASS")
data(menarche)
m <- menarche
str(m)
plot(Age,Menarche,data=m)
plot(m$Age,m$Menarche)
plot(Menarche/Total ~ Age,data = m)
?menarche
glm.out = glm(cbind(Menarche, Total-Menarche) ~ Age,
+               family=binomial(logit), data=menarche)
plot(Menarche/Total ~ Age, data=menarche)
lines(menarche$Age, glm.out$fitted, type="l", col="red")
glm.out = glm(cbind(Menarche, Total-Menarche) ~ Age, family=binomial(logit), data=menarche)
plot(Menarche/Total ~ Age, data=menarche)
lines(menarche$Age, glm.out$fitted, type="l", col="red")
title(main="Menarche Data with Fitted Logistic Regression Line")
cbind(Menarche, Total-Menarche)
attach(menarche)
cbind(Menarche, Total-Menarche)
summary(glm.out)
coeff(glm.out)
coef(glm.out)
coef(glm.out)[2]
exp(coef(glm.out)[2])
file = "http://ww2.coastal.edu/kingw/statistics/R-tutorials/text/gorilla.csv"
read.csv(file) -> gorilla
str(gorilla)
summary(gorilla)
cor(gorrilla)
cor(gorilla)
gorilla
head(UCBAdmissions)
head(UCBAdmissions,10)
str(UCBAdmissions)
dimnames(UCBAdmissions)
margin.table(UCBAdmissions, c(2,1))
?margin.table
head(UCBAdmissions,20)
UCBAdmissions
class(UCBAdmissions)
library(MASS)
?shuttle
head(shuttle)
f1 <- glm(use ~ wind,data = shuttle,family = "binomial")
summary(f1)
str(shuttle)
coef(f1)
exp(coef(f1)[2])
summary(f2)
f2 <- glm(use ~ wind * magn,data = shuttle,family = "binomial")
summary(f2)
coef(f2)
coef(f2)
coef(f2)[2]
exp(coef(f2)[2])
f3 <- glm(use ~ wind,data = shuttle,family = "binomial")
f3i <- glm(I(1-use) ~ wind,data = shuttle,family = "binomial")
f3i <- glm(1-use ~ wind,data = shuttle,family = "binomial")
f3i <- glm(1-as.numeric(use) ~ wind,data = shuttle,family = "binomial")
shuttle$wind
?transform
?gsub
shuttle$wind <- gsub('tail',shuttle$wind,1)
shuttle$wind
library(MASS)
head(shuttle)
data(shuttle)
head(shuttle)
shuttle$w <- gsub('tail',shuttle$wind,1)
shuttle$w
data(shuttle)
shuttle$w <- gsub('tail',1,shuttle$wind)
shuttle$w
shuttle$w <- gsub('head',0,shuttle$wind)
str(shuttle)
f3 <- glm(use ~ w,data = shuttle,family = "binomial")
f3i <- glm(1-(use) ~ w,data = shuttle,family = "binomial")
str(shuttle$w)
str(mtcars)
f3 <- glm(am ~ vs,data = mtcars,family = "binomial")
f3i <- glm(1-am ~ vs,data = mtcars,family = "binomial")
summary(f3)
summary(f3i)
coef(f3)
coef(f3i)
?InsectSprays
is <- InsectSprays
is
library(ggplot2)
qplot(is)
head(is)
plot(is$spray,is$count)
str(is)
f4 <- glm(count ~ spray,data = is,family="poisson")
summary(f4)
coef(f4)
coef(f4)[2]
exp(coef(f4)[2])
f4 <- glm(count ~ spray - 1,data = is,family="poisson")
summary(f4)
coef(f4)
coef(f4)[1]
coef(f4)[1]/coef(f4)[2]
f4 <- glm(count ~ factor(spray) - 1,data = is,family="poisson")
coef(f4)[1]/coef(f4)[2]
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x,y)
?show
?lm
?dcast
?dgamma
library(Lahman)
head(teams)
head(Teams)
Teams
head(Teams)
head(Teams[!is.na(Teams$lgID),])
?is.na
is.na(Teams$lgID)
!is.na(Teams$lgID)
head(!is.na(Teams$lgID))
head(Teams[!is.na(Teams$lgID),])
head(Teams[!is.na(Teams$lgID),Teams$lgID])
head(Teams[!is.na(Teams$lgID),1:3])
head(Teams[is.na(Teams$lgID),1:3])
head(Teams[Teams$lgID == 'NA',1:3])
head(Teams[Teams$lgID != 'NA',1:3])
head(Teams[Teams$lgID != 'NA',1:3])
library(Lahman)
library(ggplot2)
library(plyr)
t <- Teams
#s <- Salaries
#s <- ddply(s, .(yearID,teamID,lgID),summarise,
#           salary = sum(salary), avg.salary = mean(salary))
t.agg <- ddply(t,.(yearID,lgID),summarise,
avg.runs = round(mean(R)),avg.ab = round(mean(AB)),avg.hits = round(mean(H)),
avg.2B = round(mean(X2B)),avg.3B = round(mean(X3B)), avg.HR = round(mean(HR))
)
head(t)
t <- Teams[Teams$lgID %in% c("AL","NL")]
t <- Teams[Teams$lgID %in% c("AL","NL"),]
t.agg <- ddply(t,.(yearID,lgID),summarise,
avg.runs = round(mean(R)),avg.ab = round(mean(AB)),avg.hits = round(mean(H)),
avg.2B = round(mean(X2B)),avg.3B = round(mean(X3B)), avg.HR = round(mean(HR))
)
head(t)
head(t.agg)
tail(t.agg)
library(AppliedPredictiveModeling)
library(caret)
install.packages("caret")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
install.packages("caret")
library(caret)
data(AlzheimerDisease)
a <- AlzheimerDiesase
a <- AlzheimerDisease
a <- AlzheimerDisease
data(AlzheimerDisease)
head(diagnosis)
diagnosis
?AlzheimerDisease
install.packages("ISLR")
# project raw script
if (file.exists("F:/machine_learning/assignments/project"))  {
setwd("f:/machine_learning/assignments/project")
} else if (file.exists("E:/machine_learning/assignments/project")){
setwd("e:/machine_learning/assignments/project")
} else {
stop("no directory")
}
library(ggplot2)
library(caret)
pml <- read.csv("./raw_data/pml-training.csv")
